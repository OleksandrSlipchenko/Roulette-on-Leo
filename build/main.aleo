program roulette.aleo;

struct Game:
    identifier as u32;
    creator as address;
    number as u8;
    user_number as u8;
    result as boolean;


mapping games_counter:
	key as u8.public;
	value as u32.public;


mapping games:
	key as u32.public;
	value as Game.public;

function main:
    input r0 as u8.private;
    cast 0u32 self.caller 255u8 r0 false into r1 as Game;
    async main r1 into r2;
    output r1 as Game.private;
    output r2 as roulette.aleo/main.future;

finalize main:
    input r0 as Game.public;
    lte block.height 1000u32 into r1;
    assert.eq r1 true;
    lte r0.user_number 43u8 into r2;
    assert.eq r2 true;
    get.or_use games_counter[0u8] 0u32 into r3;
    add r3 1u32 into r4;
    set r4 into games_counter[0u8];
    rand.chacha into r5 as u8;
    lte r0.user_number 36u8 into r6;
    is.eq r0.user_number r5 into r7;
    is.eq r0.user_number 37u8 into r8;
    is.eq r0.user_number 1u8 into r9;
    is.eq r0.user_number 3u8 into r10;
    or r9 r10 into r11;
    is.eq r0.user_number 5u8 into r12;
    or r11 r12 into r13;
    is.eq r0.user_number 7u8 into r14;
    or r13 r14 into r15;
    is.eq r0.user_number 9u8 into r16;
    or r15 r16 into r17;
    is.eq r0.user_number 12u8 into r18;
    or r17 r18 into r19;
    is.eq r0.user_number 14u8 into r20;
    or r19 r20 into r21;
    is.eq r0.user_number 16u8 into r22;
    or r21 r22 into r23;
    is.eq r0.user_number 18u8 into r24;
    or r23 r24 into r25;
    is.eq r0.user_number 19u8 into r26;
    or r25 r26 into r27;
    is.eq r0.user_number 21u8 into r28;
    or r27 r28 into r29;
    is.eq r0.user_number 23u8 into r30;
    or r29 r30 into r31;
    is.eq r0.user_number 25u8 into r32;
    or r31 r32 into r33;
    is.eq r0.user_number 27u8 into r34;
    or r33 r34 into r35;
    is.eq r0.user_number 30u8 into r36;
    or r35 r36 into r37;
    is.eq r0.user_number 32u8 into r38;
    or r37 r38 into r39;
    is.eq r0.user_number 34u8 into r40;
    or r39 r40 into r41;
    is.eq r0.user_number 36u8 into r42;
    or r41 r42 into r43;
    is.eq r0.user_number 38u8 into r44;
    is.eq r0.user_number 2u8 into r45;
    is.eq r0.user_number 4u8 into r46;
    or r45 r46 into r47;
    is.eq r0.user_number 6u8 into r48;
    or r47 r48 into r49;
    is.eq r0.user_number 8u8 into r50;
    or r49 r50 into r51;
    is.eq r0.user_number 10u8 into r52;
    or r51 r52 into r53;
    is.eq r0.user_number 11u8 into r54;
    or r53 r54 into r55;
    is.eq r0.user_number 13u8 into r56;
    or r55 r56 into r57;
    is.eq r0.user_number 15u8 into r58;
    or r57 r58 into r59;
    is.eq r0.user_number 17u8 into r60;
    or r59 r60 into r61;
    is.eq r0.user_number 20u8 into r62;
    or r61 r62 into r63;
    is.eq r0.user_number 22u8 into r64;
    or r63 r64 into r65;
    is.eq r0.user_number 24u8 into r66;
    or r65 r66 into r67;
    is.eq r0.user_number 26u8 into r68;
    or r67 r68 into r69;
    is.eq r0.user_number 28u8 into r70;
    or r69 r70 into r71;
    is.eq r0.user_number 29u8 into r72;
    or r71 r72 into r73;
    is.eq r0.user_number 31u8 into r74;
    or r73 r74 into r75;
    is.eq r0.user_number 33u8 into r76;
    or r75 r76 into r77;
    is.eq r0.user_number 35u8 into r78;
    or r77 r78 into r79;
    is.eq r0.user_number 39u8 into r80;
    lte 1u8 r0.user_number into r81;
    lte r0.user_number 18u8 into r82;
    and r81 r82 into r83;
    is.eq r0.user_number 40u8 into r84;
    lte 19u8 r0.user_number into r85;
    lte r0.user_number 36u8 into r86;
    and r85 r86 into r87;
    is.eq r0.user_number 41u8 into r88;
    lte 1u8 r0.user_number into r89;
    lte r0.user_number 12u8 into r90;
    and r89 r90 into r91;
    is.eq r0.user_number 42u8 into r92;
    lte 13u8 r0.user_number into r93;
    lte r0.user_number 24u8 into r94;
    and r93 r94 into r95;
    is.eq r0.user_number 43u8 into r96;
    lte 25u8 r0.user_number into r97;
    lte r0.user_number 36u8 into r98;
    and r97 r98 into r99;
    ternary r96 r99 false into r100;
    ternary r92 r95 r100 into r101;
    ternary r88 r91 r101 into r102;
    ternary r84 r87 r102 into r103;
    ternary r80 r83 r103 into r104;
    ternary r44 r79 r104 into r105;
    ternary r8 r43 r105 into r106;
    ternary r6 r7 r106 into r107;
    cast r3 r0.creator r5 r0.user_number r107 into r108 as Game;
    set r108 into games[r3];
